/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Brainfuck.jj */
/*@egen*/options {

             
  KEEP_LINE_COLUMN=false;
                 
               
} 

PARSER_BEGIN(Brainfuck)
package com.googlecode.brainfuck4j;

import java.io.InputStream;

public class Brainfuck/*@bgen(jjtree)*/implements BrainfuckTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTBrainfuckState jjtree = new JJTBrainfuckState();

/*@egen*/

	public static ASTStart parse (InputStream in, BrainfuckVisitor visitor) throws ParseException {
		Brainfuck bf = new Brainfuck(in);
		ASTStart root = bf.ASTStart();
		root.jjtAccept(visitor, null);
		return root;
	}

}

PARSER_END(Brainfuck)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* INSTRUCTIONS */
{
  < INSTRUCTION_LITERAL: 
  	"<" 
   | 
  	">"
   | 
    "+" 
   |
    "-" 
   |
    "." 
   |
    "," 
  >
}

TOKEN : /* Header keywords and values */
{
	< PROGRAM_NAME_KEYWORD: "Program" >
|
	< HEAP_SIZE_KEYWORD: "Heapsize" >
|
	< CODE_KEYWORD: "Code" >
|
	< PROGRAM_NAME: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z"])*>
|
	< HEAP_SIZE: ["1"-"9"] (["0"-"9"])* >

}

/** Root production. */
ASTStart ASTStart() : {/*@bgen(jjtree) ASTStart */
  ASTStart jjtn000 = new ASTStart(JJTASTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ASTStart */
        try {
/*@egen*/
	Header()
	(Expression())*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/** Header productions. */
void Header() : {/*@bgen(jjtree) Header */
  Header jjtn000 = new Header(JJTHEADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Header */
        try {
/*@egen*/
	ProgramHeader()
	HeapHeader()
	<CODE_KEYWORD>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
} 


void ProgramHeader() :
{/*@bgen(jjtree) ProgramHeader */
        ProgramHeader jjtn000 = new ProgramHeader(JJTPROGRAMHEADER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) ProgramHeader */
        try {
/*@egen*/
	<PROGRAM_NAME_KEYWORD>
	t=<PROGRAM_NAME>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void HeapHeader() :
{/*@bgen(jjtree) HeapHeader */
        HeapHeader jjtn000 = new HeapHeader(JJTHEAPHEADER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) HeapHeader */
        try {
/*@egen*/
	<HEAP_SIZE_KEYWORD>
	t=<HEAP_SIZE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setSize(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/** Instruction productions. */
void Expression() : {/*@bgen(jjtree) Expression */
  Expression jjtn000 = new Expression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
        try {
/*@egen*/
	UnaryExpression()
|
	BlockExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void UnaryExpression() : 
{/*@bgen(jjtree) UnaryExpression */
        UnaryExpression jjtn000 = new UnaryExpression(JJTUNARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) UnaryExpression */
        try {
/*@egen*/
	t=<INSTRUCTION_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setInstruction(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}

void BlockExpression() : {/*@bgen(jjtree) BlockExpression */
  BlockExpression jjtn000 = new BlockExpression(JJTBLOCKEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BlockExpression */
        try {
/*@egen*/
	"[" (Expression())* "]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
